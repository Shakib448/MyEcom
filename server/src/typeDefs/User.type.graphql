type User {
  id: ID!
  email: String!
  password: String
  confirmPassword: String
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  city: String!
  country: String!
  state: String!
  zip: String!
  location: String!
  token: String
}

type Query {
  getAllUsers: [User!]!
}

interface MutationResponse {
  success: Boolean!
  message: String!
  user: User
}

type UserResponse implements MutationResponse {
  success: Boolean!
  message: String!
  user: User
}

type Mutation {
  userCreate(
    email: String!
    password: String!
    confirmPassword: String!
    firstName: String!
    lastName: String!
    phoneNumber: String!
    address: String!
    city: String!
    country: String!
    state: String!
    zip: String!
    location: String!
  ): UserResponse

  updateUser(
    email: String!
    password: String!
    confirmPassword: String!
    firstName: String!
    lastName: String!
    phoneNumber: String!
    address: String!
    city: String!
    country: String!
    state: String!
    zip: String!
    location: String!
  ): UserResponse

  userById(id: ID!): User
  userDeleteById(id: ID!): UserResponse
  authUser(email: String!, password: String!): UserResponse
}
